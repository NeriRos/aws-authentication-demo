AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: serverless authentication app demo

Parameters:
  ClientDomain:
    Type: String
    Description: Domain allowed to use the UserPool
    Default: "*"
  Postman:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

Globals:
  Function:
    Environment:
      Variables:
        STAGE: Prod
        JWT_ISSUER: !GetAtt AuthStack.Outputs.Issuer
        CLIENT_POOL_ID: !GetAtt AuthStack.Outputs.UserPoolClientId
        USERS_TABLE: !Ref UsersTable
        USER_POOL_ID: !GetAtt AuthStack.Outputs.UserPool

Resources:
  AuthStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./auth.yaml
      Parameters:
        ClientDomain: !Ref ClientDomain
        Postman: !Ref Postman

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-user.createUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Description: Create user in the DynamoDB table and Cognito User pool.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /user
            ApiId: !Ref OpenApi
            Method: POST

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/login-user.loginUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Description: Login with Cognito to receive a cookie with JWT.
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /user/login
            ApiId: !Ref OpenApi
            Method: POST

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user.getUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get users by id from a DynamoDB table (requires auth).
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /user/{id+}
            ApiId: !Ref AuthApi
            Method: GET
            Auth:
              Authorizer: JWTCognito

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-user.updateUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Description: Update user in the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /user
            ApiId: !Ref AuthApi
            Method: PUT

  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: national_id
        Type: String
      TableName: "Users"

  OpenApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Open api
      StageName: Prod

  AuthApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Connect Cognito to HTTP API
      StageName: Prod
      Auth:
        Authorizers:
          JWTCognito:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !GetAtt AuthStack.Outputs.Issuer
              audience:
                - !GetAtt AuthStack.Outputs.UserPoolClientId
        DefaultAuthorizer: JWTCognito
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
#      AccessLogSettings:
#        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
#        Format: "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId"
#
#  ApiAccessLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub "/aws/http-api/${ServerlessRestApi}/access_log"
#      RetentionInDays: 30

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${OpenApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"